name: Integrate MeTube-DevOps.UserService

on:
  push:
    branches: [ SSCITEST ]
    paths:
      - MeTube-DevOps.UserService/**
  pull_request:
    branches: [ SSCITEST ]
    paths:
      - MeTube-DevOps.UserService/**
  workflow_dispatch:

jobs:
  integrate:
    runs-on: ubuntu-latest
    
    env:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: "http://localhost:5218"
      ConnectionStrings__DefaultConnection: "Server=localhost;Database=MeTubeUserDb;User Id=sa;Password=YourSecretPass123;TrustServerCertificate=True;Encrypt=False;Connect Timeout=30"
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Start SQL Server
        run: |
          docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=YourSecretPass123" \
            -e "MSSQL_PID=Express" \
            --name sql-server \
            -p 1433:1433 -d mcr.microsoft.com/mssql/server:2019-latest

      - name: Verify SQL Server
        run: |
          echo "Waiting for SQL Server to start..."
          for i in {1..30}; do
            if docker exec sql-server /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P YourSecretPass123 -Q "SELECT @@VERSION" -C; then
              echo "SQL Server is ready!"
              break
            fi
            echo "Attempt $i: Waiting for SQL Server to initialize..."
            sleep 5
            if [ $i -eq 30 ]; then
              echo "SQL Server failed to initialize. Checking logs..."
              docker logs sql-server
              exit 1
            fi
          done
      
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.101

      - name: Install EF Core CLI
        run: dotnet tool install --global dotnet-ef
          
      - name: Apply Migrations
        run: |
          cd MeTube-DevOps.UserService/MeTube-DevOps.UserService
          dotnet ef database update --verbose
      
      - name: Build Solution
        run: |
          dotnet build MeTube-DevOps.UserService

      - name: Install Playwright browsers
        run: |
          cd MeTube-DevOps.UserService
          dotnet tool install --global Microsoft.Playwright.CLI
          playwright install
      
      - name: Check project structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "MeTube-DevOps.UserService directory contents:"
          ls -la MeTube-DevOps.UserService
          echo "MeTube-DevOps.UserService/MeTube-DevOps.UserService directory contents:"
          ls -la MeTube-DevOps.UserService/MeTube-DevOps.UserService
          echo "Project info:"
          dotnet list MeTube-DevOps.UserService/MeTube-DevOps.UserService/MeTube-DevOps.UserService.csproj reference
      
      - name: Run UserService
        run: |
          cd MeTube-DevOps.UserService/MeTube-DevOps.UserService
          # Use full path for log file
          LOG_FILE="$GITHUB_WORKSPACE/userservice.log"
          echo "Log file will be: $LOG_FILE"
          nohup dotnet run --urls "http://localhost:5218" > "$LOG_FILE" 2>&1 &
          echo $! > "$GITHUB_WORKSPACE/userservice.pid"
          # Check if process started
          ps -p $(cat "$GITHUB_WORKSPACE/userservice.pid")
          
      - name: Wait for UserService
        run: |
          LOG_FILE="$GITHUB_WORKSPACE/userservice.log"
          echo "Waiting for UserService to start..."
          echo "Process status:"
          ps -p $(cat "$GITHUB_WORKSPACE/userservice.pid") || echo "Process not running!"
          
          # Check if port is listening
          echo "Port status:"
          netstat -tulpn | grep 5218 || echo "Port 5218 not listening"
          
          for i in {1..30}; do
            echo "Attempt $i: Checking service..."
            response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5218/health 2>/dev/null)
            echo "  HTTP Status: $response"
            
            if [ "$response" = "200" ]; then
              echo "UserService is ready!"
              break
            fi
            
            if [ $i -eq 10 ] || [ $i -eq 20 ]; then
              echo "Checking log file after $i attempts:"
              if [ -f "$LOG_FILE" ]; then
                echo "Log file exists, showing last 20 lines:"
                tail -20 "$LOG_FILE"
              else
                echo "Log file does not exist!"
              fi
              
              # Check process again
              echo "Process status update:"
              ps -p $(cat "$GITHUB_WORKSPACE/userservice.pid") || echo "Process not running!"
            fi
            
            sleep 3
            if [ $i -eq 30 ]; then
              echo "UserService failed to start after 30 attempts."
              if [ -f "$LOG_FILE" ]; then
                echo "Full log contents:"
                cat "$LOG_FILE"
              else
                echo "Log file does not exist!"
              fi
              exit 1
            fi
          done
      
      - name: Test
        run: |
          cd MeTube-DevOps.UserService
          dotnet test --no-build
        
      - name: Cleanup
        if: always()
        run: |
          if [ -f "$GITHUB_WORKSPACE/userservice.pid" ]; then
            kill $(cat "$GITHUB_WORKSPACE/userservice.pid") 2>/dev/null || echo "Process already stopped"
          fi
          docker stop sql-server || true
          docker rm sql-server || true