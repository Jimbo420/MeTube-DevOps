#
# GitHub Actions workflow to test the MeTube-DevOps.UserService microservice
#

name: MeTube-DevOps.UserService CI

# Controls when the workflow will run
on:
  # This configuration triggers the workflow:
  # - On a "push" ...
  # - ... to the "main" branch ...
  # - ... but only when changes have been made to any folder/file under the "MeTube-DevOps.UserService" folder, including subfolders.
  #   ("/**" means "all subfolders recursively").
  # As a result, the workflow will only run when changes are made to the UserService microservice.
  push:
    branches: [GitHubActions-AB]
    paths:
      - "MeTube-DevOps.UserService/**"

  # This configuration triggers the workflow:
  # - On a "pull_request" ...
  # - ... to the "main" branch ...
  # - ... but only when changes have been made to any folder/file under the "MeTube-DevOps.UserService" folder, including subfolders.
  pull_request:
    branches: [GitHubActions-AB]
    paths:
      - "MeTube-DevOps.UserService/**"

  # The configuration allows the workflow to be triggers manually through the GitHub Actions user interface.
  # When choosing the workflow in the left margin under the Actions tab in GitHub's Web UI,
  # there will be a "Run" drop-down listbox in the Web UI's far right, which can be used to manually trigger the workflow.
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
# Jobs are defined as entries under "jobs"
jobs:
  # This workflow contains a single job called "build-and-test" (the name will be shown in the workflow's output when it's run).
  # We can call this anything we like.
  build-and-test:
    # Runs on the latest version of Ubuntu
    # GitHub will create a virtual machine or container, where we can choose what image to use under "runs-on"
    # In this case, the virtual machine/container is based on the latest version of Ubuntu (a Linux distro)
    runs-on: ubuntu-latest

    # Create a custom network for the containers to communicate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Create Docker network
        run: docker network create metube-network

      - name: Setup SQL Server
        run: |
          docker run -d --name sqlserver --network metube-network \
            -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=YourSecretPass123" \
            -p 1433:1433 mcr.microsoft.com/mssql/server:2019-latest

          # Wait for SQL Server to be ready
          echo "Waiting for SQL Server to start..."
          sleep 10s
          docker exec sqlserver /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourSecretPass123 -Q "SELECT 1" || exit 1

      # Run unit tests directly using .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.101

      - name: Restore dependencies
        run: dotnet restore MeTube-DevOps.UserService/MeTube-DevOps.UserService.sln

      - name: Run unit tests
        run: dotnet test MeTube-DevOps.UserService/MeTube-DevOps.UserService.UnitTests/MeTube-DevOps.UserService.UnitTests.csproj --verbosity normal

      # Build and run service using Docker
      - name: Build Docker image
        run: |
          docker build -t metube-userservice \
            -f MeTube-DevOps.UserService/MeTube-DevOps.UserService/Dockerfile \
            ./MeTube-DevOps.UserService

      - name: Run UserService container
        run: |
          # Modify the connection string in the container
          docker run -d --name userservice --network metube-network \
            -e "ConnectionStrings__DefaultConnection=Server=sqlserver;Database=MeTubeUserDb;User Id=sa;Password=YourSecretPass123;TrustServerCertificate=True" \
            -p 5218:80 metube-userservice

          echo "Waiting for service to start..."
          sleep 10s
          # Check if service is running
          curl -v http://localhost:5218/health || echo "Service not responding, continuing anyway"

      # Run integration tests with adjusted connection string
      - name: Run integration tests
        run: |
          # Update connection string in tests to point to the Docker container
          sed -i 's|Server=localhost;Database=MeTubeUserDb;|Server=localhost,1433;Database=MeTubeUserDb;|g' MeTube-DevOps.UserService/MeTube-DevOps.UserService.IntegrTests/appsettings.json

          # Run integration tests
          dotnet test MeTube-DevOps.UserService/MeTube-DevOps.UserService.IntegrTests/MeTube-DevOps.UserService.IntegrTests.csproj \
            --verbosity normal
