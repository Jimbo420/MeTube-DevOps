@page "/videos/manage"
@inject ManageVideosViewModel ViewModel
@* @using MeTube.Client.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject IUserService UserService *@

<link href="css/manage_videos.css" rel="stylesheet" />

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Manage Your Videos</h2>
        <a href="/videos/upload" class="btn btn-primary">
            <i class="bi bi-cloud-upload"></i> Upload New Video
        </a>
    </div>

    @if (!string.IsNullOrEmpty(ViewModel.SuccessMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle me-2"></i>
            @ViewModel.SuccessMessage
            <button type="button" class="btn-close" @onclick="() => ViewModel.SuccessMessage = string.Empty"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-circle me-2"></i>
            @ViewModel.ErrorMessage
            <button type="button" class="btn-close" @onclick="() => ViewModel.ErrorMessage = string.Empty"></button>
        </div>
    }

    @if (ViewModel.IsLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
    {
        <div class="alert alert-danger">
            @ViewModel.ErrorMessage
        </div>
    }
    else if (!ViewModel.UserVideos.Any())
    {
        <div class="text-center">
            <p class="lead">You haven't uploaded any videos yet.</p>
            <a href="/videos/upload" class="btn btn-primary">Upload Your First Video</a>
        </div>
    }
    else
    {
        <div class="table-responsive">
    using MeTube.Client.ViewModels.VideoViewModels;
            <table class="table table-hover video-table">
                <thead>
                    <tr>
                        <th>Thumbnail</th>
                        <th>Title</th>
                        <th>Upload Date</th>
                        <th>Description</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var video in ViewModel.UserVideos)
                    {
                        <tr>
                            <td class="thumbnail-cell">
                                <img src="@video.ThumbnailUrl" alt="@video.Title" class="video-thumbnail" />
                            </td>
                            <td class="align-middle">
                                <a href="/video/@video.Id" class="video-title">@video.Title</a>
                            </td>
                            <td class="align-middle">@video.DateUploaded.ToString("MMM dd, yyyy")</td>
                            <td class="align-middle description-cell">
                                @(video.Description?.Length > 100
                                        ? video.Description.Substring(0, 97) + "..."
                                        : video.Description)
                            </td>
                            <td class="align-middle">
                                <div class="btn-group">
                                    @if(IsAuthenticated && UserRole == "Admin")
                                    {
                                        <button @onclick="() => ViewModel.NavigateToEdit(video.Id)"
                                        class="btn btn-outline-primary btn-sm">
                                            <i class="bi bi-pencil"></i> Edit
                                        </button>
                                    }
                                    <button @onclick="() => ViewModel.ShowDeleteConfirmation(video)"
                                    class="btn btn-outline-danger btn-sm ms-2">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    @if (ViewModel.ShowDeleteConfirmationBool)
    {
        <div class="modal-backdrop fade show"></div>
        <div class="modal fade show" tabindex="-1" style="display: block;">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button type="button" class="btn-close" @onclick="ViewModel.HideDeleteConfirmation"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete the video "@(ViewModel.VideoToDelete?.Title)"?</p>
                        <p class="text-muted small">This action cannot be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="ViewModel.HideDeleteConfirmation">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="ViewModel.ConfirmDeleteVideoAsync">
                            <i class="bi bi-trash"></i> Delete Video
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool IsAuthenticated = false;
    private string UserRole = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        @* Dictionary<string, string> response = await UserService.IsUserAuthenticated();
        UserRole = response["Role"];
        IsAuthenticated = Convert.ToBoolean(response["IsAuthenticated"]);

        if(IsAuthenticated && UserRole != "Admin")
        {
            await ViewModel.LoadUserVideosAsync();
        }
        else if (IsAuthenticated && UserRole == "Admin")
        {
            await ViewModel.LoadAllVideos();
        } *@
    }
}