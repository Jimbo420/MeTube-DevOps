// <auto-generated />
using MeTube_DevOps.UserService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MeTube_DevOps.UserService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250228122620_initialCreate")]
    partial class initialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MeTube_DevOps.UserService.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("User");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alice@example.com",
                            Password = "password123",
                            Role = "Admin",
                            Username = "Alice"
                        },
                        new
                        {
                            Id = 2,
                            Email = "bob@example.com",
                            Password = "securePass",
                            Role = "Admin",
                            Username = "Bob"
                        },
                        new
                        {
                            Id = 3,
                            Email = "charlie@example.com",
                            Password = "pass456",
                            Role = "User",
                            Username = "Charlie"
                        },
                        new
                        {
                            Id = 4,
                            Email = "diana@example.com",
                            Password = "dianaPass",
                            Role = "User",
                            Username = "Diana"
                        },
                        new
                        {
                            Id = 5,
                            Email = "eve@example.com",
                            Password = "evePass123",
                            Role = "User",
                            Username = "Eve"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
